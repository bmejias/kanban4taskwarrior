#! /usr/bin/env python3

from random import SystemRandom as generator
from subprocess import Popen, PIPE
# from subprocess import check_output
import os
import string
import sys

TASK = '/usr/bin/task'
SPRINT_KEY_FILE = '.sprint_key'
KANBAN = 'kanban'


def get_key(must_exist=False):
    if os.path.isfile(SPRINT_KEY_FILE):
        sprint = open(SPRINT_KEY_FILE, 'r')
        key = sprint.read()
        sprint.close()
        return key
    else:
        if must_exist:
            print("ERR: Sprint has not started yet!")
            sys.exit(2)
        else:
            return None


######################################################################
# Global actions to open and close sprints
######################################################################


def open_sprint(__args__):
    if os.path.isfile(SPRINT_KEY_FILE):
        print("ERROR: Sprint already open!")
        sys.exit(1)
    else:
        sprint = open(SPRINT_KEY_FILE, 'w')
        key = ''.join(generator().choice(string.ascii_letters) for _ in range(8))
        sprint.write(key)
        sprint.close()
        print("Sprint started: %s" % key)


def close_sprint(force):
    if os.path.isfile(SPRINT_KEY_FILE):
        sprint = open(SPRINT_KEY_FILE, 'r')
        key = sprint.read()
        sprint.close()
        # print("There is a sprint with key: %s" % key)
        out, err = Popen("%s +%s count" % (TASK, key),
                         stdout=PIPE, stderr=PIPE, shell=True).communicate()
        open_tasks = int(out.decode().strip())
        if open_tasks is 0:
            print("Removing sprint key")
            os.remove(SPRINT_KEY_FILE)
        else:
            print("WARN: There are still %s tasks to be done.\n" % open_tasks)
            print("Use:\n\t%s close force\n\nto force sprint close" % KANBAN)
            sys.exit(101)
    else:
        print("ERR: Sprint has not started yet!")
        sys.exit(2)


######################################################################
# Actions perfomed on task ids
######################################################################


def add_to_ready(taskid):
    key = get_key(True)
    os.system("%s %s mod +%s +ready" % (TASK, taskid, key))


def add_to_wip(taskid):
    os.system("%s %s start -ready" % (TASK, taskid))


def add_to_done(taskid):
    os.system("%s %s done" % (TASK, taskid))


def block(taskid):
    print("Not Yet Implemented!")


######################################################################
# Reporting actions
######################################################################


def list_backlog():
    key = get_key(False)
    if key is None:
        print("WARN: There is no sprint open yet")
        os.system("%s next" % TASK)
    else:
        os.system("%s -%s" % (TASK, key))


def list_with_tag(tag):
    key = get_key(True)
    os.system("%s +%s +%s" % (TASK, key, tag))


def list_blocked():
    list_with_tag('BLOCKED')


def list_ready():
    list_with_tag('ready')


def list_wip():
    key = get_key(True)
    os.system("%s +%s active" % (TASK, key))


def list_done():
    key = get_key(True)
    os.system("%s completed +%s" % (TASK, key))


def burndown():
    key = get_key(True)
    os.system("%s +%s burndown.daily" % (TASK, key))


######################################################################
# Main procedure
######################################################################


def main():
    sprint_actions = {
        'open': open_sprint,
        'close': close_sprint
    }
    reports = {
        'backlog': list_backlog,
        'ready': list_ready,
        'blocked': list_blocked,
        'completed': list_done,
        'wip': list_wip,
        'burndown': burndown
    }
    actions = {
        'add': add_to_ready,
        'start': add_to_wip,
        'done': add_to_done,
        'block': block
    }
    command = None if len(sys.argv) < 2 else str(sys.argv[1])
    if command in reports.keys():
        reports[command]()
    elif command in actions.keys():
        actions[command](sys.argv[2])
    elif command in sprint_actions.keys():
        sprint_actions[command](sys.argv)


if __name__ == '__main__':
        main()
